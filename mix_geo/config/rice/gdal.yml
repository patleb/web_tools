aliases:
  - &proj [const Ostring &, proj = nil]

makefile:
  libs: <%= `gdal-config --libs` %>
  cflags: <%= `gdal-config --cflags` %>

include:
  - proj.h
  - gdal_priv.h

after_include: >
  using namespace GDAL;

before_initialize: >
  GDALAllRegister();

module PROJ:
  def:
    self.version:

module GDAL:
  def:
    self.version:

  class Base | GDAL::Base:
    def:
      self.srid        | _srid_:
      self.wkt         | _wkt_:
      self.proj4       | _proj4_:
      self.orientation | _orientation_:

      srid:
      wkt:
      proj4:
      orientation:

  class Point < GDAL::Base:
    def:
      initialize | GDAL::Point.COPY: [[double, x], [double, y], *proj]
      x:
      y:
      distance:
      reproject:

  class Vector < GDAL::Base:
    attr_reader: [size]

    def:
      initialize | GDAL::Vector.COPY: [[const Vdouble &, x], [const Vdouble &, y], *proj]
      x | _x_:
      y | _y_:
      first:
      last:
      minmax:
      points:
      reproject:

  class Raster < GDAL::Base:
    class Transform | GDAL::Raster::Transform:
      attr_reader: [x0, y0, dx, dy, rx, ry]

      def:
        mesh | _mesh_:
        cache_key:

    attr_reader: [width, height, x0, y0, dx, dy]

    def:
      initialize | GDAL::Raster.COPY: [[Tensor::Base &, z], [Tensor::Type, type], [const Vdouble &, x01_y01], *proj]
      fill_value:
      shape:
      type:
      x:
      y:
      z | _z_:
      grid:
      reproject:
      transform_for:
