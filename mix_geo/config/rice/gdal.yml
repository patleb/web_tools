after_include: >
  using namespace GDAL;

before_initialize: >
  GDALAllRegister();

module GDAL:
  enum DataType | GDAL::DataType: [Unknown, Int8, Int16, Int32, Int64, SFloat, DFloat, UInt8, UInt16, UInt32, UInt64]
  enum AlgoType | GDAL::AlgoType: [Nearest, Bilinear, Cubic, Spline, Lanczos, Average, Mode, Max, Min, Median, Q1, Q3, Sum, RMS]

  def:
    self.version:

  class Base | GDAL::Base:
    def:
      srid:
      wkt:
      proj4:

  class Vector < GDAL::Base:
    def:
      self.transform_bounds: [x0n_y0n, src_proj, dst_proj, density = (size_t)21]

      initialize | GDAL::Vector.COPY:
        - [vector< double >, x]
        - [vector< double >, y]
        - [string, proj = (string)"4326"]
      size:
      x:
      y:
      transform:

  class Raster < GDAL::Base:
    def:
      initialize | GDAL::Raster.COPY:
        - [Numo::NArray, grid]
        - [Numo::Type, type_id]
        - [vector< double >, x01_y01]
        - [string, proj = (string)"4326"]
        - [std::optional< double >, nodata = std::nullopt]
      type:
      width:
      height:
      shape:
      x0:
      y0:
      dx:
      dy:
      x:
      y:
      x01_y01:
      bounds:
      nodata:
      to_narray:
      reproject: [proj, nodata = std::nullopt, fill_ratio = (double)1.0, algo = AlgoType::Nearest]
