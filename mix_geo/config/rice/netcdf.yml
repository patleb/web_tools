makefile:
  libs: <%= `nc-config --libs` %>
  cflags: <%= `nc-config --cflags` %>

include:
  - netcdf.h

after_include: >
  using namespace NetCDF;

module NetCDF:
  NULL_ID:                        # -1
  GLOBAL:        NC_GLOBAL        # -1
  NOWRITE:       NC_NOWRITE       # 0x0000
  WRITE:         NC_WRITE         # 0x0001
  CLOBBER:       NC_CLOBBER       # 0x0000
  NOCLOBBER:     NC_NOCLOBBER     # 0x0004
  CLASSIC_MODEL: NC_CLASSIC_MODEL # 0x0100
  SHARE:         NC_SHARE         # 0x0800
  NETCDF4:       NC_NETCDF4       # 0x1000
  UNLIMITED:     NC_UNLIMITED     # 0L
  FILL_STRING:   NC_FILL_CHAR     # (char)0
  FILL_INT8:     NC_FILL_BYTE     # (signed char)-127
  FILL_INT16:    NC_FILL_SHORT    # (short)-32767
  FILL_INT32:    NC_FILL_INT      # -2147483647
  FILL_INT64:    NC_FILL_INT64    # (long long)-9223372036854775806LL
  FILL_SFLOAT:   NC_FILL_FLOAT    # 9.9692099683868690e+36f /* near 15 * 2^119 */
  FILL_DFLOAT:   NC_FILL_DOUBLE   # 9.9692099683868690e+36
  FILL_UINT8:    NC_FILL_UBYTE    # 255
  FILL_UINT16:   NC_FILL_USHORT   # 65535
  FILL_UINT32:   NC_FILL_UINT     # 4294967295U
  FILL_UINT64:   NC_FILL_UINT64   # (unsigned long long)18446744073709551614ULL

  enum Type | NetCDF::Type: [String, Int8, Int16, Int32, Int64, SFloat, DFloat, UInt8, UInt16, UInt32, UInt64]

  def:
    self.version:

  class Base | NetCDF::Base:
    attr_reader: [id]

  class File < NetCDF::Base:
    attr_reader: [path, mode, flags]

    def:
      initialize | NetCDF::File.DEFAULT:
        - [const string &, path]
        - [Ostring, mode = nil]
        - [Obool, nc4_classic = nil]
        - [Obool, classic = nil]
        - [Obool, share = nil]
      open: [path, mode = nil, nc4_classic = nil, classic = nil, share = nil]
      close:
      closed? | is_null:
      sync:
      format:
      dims:
      vars:
      atts:
      dim:
      var:
      att:
      create_dim: [name, size = nil]
      create_var:
      write_att:
      write_att_s:
      set_define_mode:
      set_fill:

  class BelongsToFile < NetCDF::Base:
    attr_reader: [file_id]

  class Dim < NetCDF::BelongsToFile:
    def:
      initialize | NetCDF::Dim.NO_DEFAULT.COPY:
      name:
      name= | rename:
      unlimited? | is_unlimited:
      size:

  class Att < NetCDF::BelongsToFile:
    attr_reader: [var_id, name]

    def:
      initialize | NetCDF::Att.NO_DEFAULT.COPY:
      name= | rename:
      type:
      size:
      read:
      destroy:

  class Var < NetCDF::BelongsToFile:
    def:
      initialize | NetCDF::Var.NO_DEFAULT.COPY:
      name:
      name= | rename:
      type:
      dims_count:
      dims:
      atts:
      dim:
      att:
      shape:
      write_att:
      write_att_s:
      write:
      write_s:
      read:
      fill_value:
      set_fill_value:
      fill:
      set_fill:
      endian:
      set_endian:
      checksum:
      set_checksum:
      deflate:
      set_deflate:
      quantize:
      set_quantize:
      chunking:
      set_chunking:
      chunk_cache:
      set_chunk_cache:
