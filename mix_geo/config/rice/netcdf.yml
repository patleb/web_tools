after_include: >
  using namespace NetCDF;

module NetCDF:
  UNLIMITED: NC_UNLIMITED

  enum Type: [String, Int8, Int16, Int32, Int64, SFloat, DFloat, UInt8, UInt16, UInt32, UInt64]

  def:
    self.version:

  class File:
    attr_reader: [path, mode, classic, share]

    def:
      initialize | NetCDF::File.DEFAULT:
        - [const string &, path]
        - [string, mode = (string)"r"]
        - [bool, nc4_classic = false]
        - [bool, classic = false]
        - [bool, share = false]
      open: [path, mode = (string)"r", nc4_classic = false, classic = false, share = false]
      close:
      closed? | is_null:
      sync:
      dims:
      vars:
      atts:
      create_dim: [name, size = (size_t)NC_UNLIMITED] # unlimited if size is 0
      create_var:
      write_att:
      write_att_s:
      set_define_mode:
      set_fill:

  class Dim:
    def:
      name:
      name= | rename:
      unlimited? | is_unlimited:
      size:

  class Att:
    attr_reader: [name]

    def:
      name= | rename:
      type:
      size:
      read:
      destroy:

  class Var:
    def:
      name:
      name= | rename:
      type:
      dims_count:
      dims:
      atts:
      shape:
      write_att:
      write_att_s:
      write:
      write_s:
      read:
      fill_value:
      set_fill_value:
      fill:
      set_fill:
      endian:
      set_endian:
      checksum:
      set_checksum:
      deflate:
      set_deflate:
      quantize:
      set_quantize:
      chunking:
      set_chunking:
      chunk_cache:
      set_chunk_cache:
