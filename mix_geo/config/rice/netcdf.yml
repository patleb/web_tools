after_include: >
  using namespace NetCDF;

module NetCDF:
  UNLIMITED:   NC_UNLIMITED   # 0L
  FILL_STRING: NC_FILL_CHAR   # (char)0
  FILL_INT8:   NC_FILL_BYTE   # (signed char)-127
  FILL_INT16:  NC_FILL_SHORT  # (short)-32767
  FILL_INT32:  NC_FILL_INT    # -2147483647
  FILL_INT64:  NC_FILL_INT64  # (long long)-9223372036854775806LL
  FILL_FLOAT:  NC_FILL_FLOAT  # 9.9692099683868690e+36f /* near 15 * 2^119 */
  FILL_DOUBLE: NC_FILL_DOUBLE # 9.9692099683868690e+36
  FILL_UINT8:  NC_FILL_UBYTE  # 255
  FILL_UINT16: NC_FILL_USHORT # 65535
  FILL_UINT32: NC_FILL_UINT   # 4294967295U
  FILL_UINT64: NC_FILL_UINT64 # (unsigned long long)18446744073709551614ULL

  enum Type: [String, Int8, Int16, Int32, Int64, SFloat, DFloat, UInt8, UInt16, UInt32, UInt64]

  def:
    self.version:

  class File:
    attr_reader: [path, mode, flags]

    def:
      initialize | NetCDF::File.DEFAULT:
        - [const string &, path]
        - [string, mode = (string)"r"]
        - [bool, nc4_classic = false]
        - [bool, classic = false]
        - [bool, share = false]
      open: [path, mode = (string)"r", nc4_classic = false, classic = false, share = false]
      close:
      closed? | is_null:
      sync:
      format:
      dims:
      vars:
      atts:
      create_dim: [name, size = (size_t)NC_UNLIMITED]
      create_var:
      write_att:
      write_att_s:
      set_define_mode:
      set_fill:

  class Dim:
    def:
      name:
      name= | rename:
      unlimited? | is_unlimited:
      size:

  class Att:
    attr_reader: [name]

    def:
      name= | rename:
      type:
      size:
      read:
      destroy:

  class Var:
    def:
      name:
      name= | rename:
      type:
      dims_count:
      dims:
      atts:
      shape:
      write_att:
      write_att_s:
      write:
      write_s:
      read:
      fill_value:
      set_fill_value:
      fill:
      set_fill:
      endian:
      set_endian:
      checksum:
      set_checksum:
      deflate:
      set_deflate:
      quantize:
      set_quantize:
      chunking:
      set_chunking:
      chunk_cache:
      set_chunk_cache:
