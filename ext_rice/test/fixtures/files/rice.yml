gems:

before_all: >
  #include "some_code.hpp"

after_all: >
  #include "some_other_code.hpp"

before_init: >
  init_some_code();

after_init: >
  init_some_other_code();

module Root:
  CONSTANT: 2

  enum COLOR | Root::COLOR: [RED, BLUE, GREEN]

  def:
    self.root:

  class Simple | Root::Simple:
    enum! Props | Root::Simple::PROPS: [ValueA1, ValueB2, ValueC3]

    def:
      simple:

  module Name:
    def:
      name:

    class Base | Root::Name::BaseAlias:
      attr_accessor:
        - both | readWrite
        - mode
      attr_reader: [read_only | readOnly]
      attr_writer!: writeOnly
      cattr_writer: static_write_only | writeOnly

      def!:
        self.base | base_alias: [arg_1, 'arg_2 = (std::string)"value"']
        self.CamelCase:
        initialize: [int, float]
        CamelCase:

  class Test | Root::TestAlias < Root::Name::BaseAlias:
    def:
      initialize   | Root::TestAlias: [[int, arg1], [float, 'arg_2 = 1.2']]
      test         | static: [arg]
      outside      | static ::outside:
      value        | value: { size_t: [] }
      value=       | value: { void: [size_t] }
      arg_alive:    [arg_name.NO_COLLECT]
      arg_value:    [arg_name.AS_VALUE]
      return_alive: [return.NO_COLLECT]
      return_value: [return.AS_VALUE]
      return_owner: [return.NO_DELETE]
      lambda: >
        [](Object& self) -> std::vector<int32_t>& {
          return test_hello();
        }

class Overload:
  def:
    initialize | ::Overload.DEFAULT.COPY.MOVE:
      - { [int, float] }
      - { [[int, arg1], [float, 'arg_2 = 1.2']] }
    name:
      - { vectot<int>& const: [] }
      - { size_t: [] }
      - { void: [size_t] }
      - { bool: [[int, arg_1], [std::string, 'arg_2 = (std::string)"value"']] }

def:
  global:

class Global:
  def:
    global | ::global:

module Empty:

enum SEASON: [SPRING, SUMMER, FALL, WINTER]
