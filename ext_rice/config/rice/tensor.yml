aliases:
  - &shape [const Vsize_t &, shape]
  <%- compile_vars[:numeric_types].each_value do |type| -%>
  - &fill_value_<%= type %> [std::optional< <%= type %> >, fill_value = std::nullopt]
  <%- end -%>

module Tensor:
  enum Type | Tensor::Type: [<%= compile_vars[:numeric_types].keys.join(', ') %>]

  class Base | Tensor::Base:
    attr_reader: [size, rank]

    def:
      dims:
      type_id:

  <% compile_vars[:numeric_types].each do |tensor_type, type| %>
  class <%= tensor_type %> < Tensor::Base:
    attr_reader: [fill_value]

    def:
      initialize | Tensor::<%= tensor_type %>.COPY:
        - { [ *shape, *fill_value_<%= type %> ] }
        - { [ [const V<%= type %> &, values], *shape, *fill_value_<%= type %> ] }
      "[] | operator[]":
        - { const <%= type %> & const: [const Vsize_t & indexes] }
      "[]=": >
        [](Tensor::<%= tensor_type %> & self, const Vsize_t & indexes, const <%= type %> & value) -> const <%= type %> & {
          self[indexes] = value;
          return value;
        }
      values:
      slice:
      reshape: >
        [](Tensor::<%= tensor_type %> & self, const Vsize_t & shape) -> Tensor::<%= tensor_type %> & {
          self.reshape(shape);
          return self;
        }
      sequence: >
        [](Tensor::<%= tensor_type %> & self) -> Tensor::<%= tensor_type %> & {
          self.sequence();
          return self;
        }
      to_sql:
  <% end %>
