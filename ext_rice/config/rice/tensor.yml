aliases:
  - &shape [const Vsize_t &, shape]
  <%- template[:numeric].each_value do |type| -%>
  - &fill_value_<%= type %> [const O<%= type %> &, fill_value = nil]
  <%- end -%>
  - &start [const Vsize_t &, start = Vsize_t()]
  - &count [const Vsize_t &, count = Vsize_t()]
  - &stride [const Vsize_t &, stride = Vsize_t()]

module Tensor:
  enum Type | Tensor::Type: [<%= template[:numeric].keys.join(', ') %>]

  class Base | Tensor::Base:
    attr_reader: [size, rank, type]

    def:
      shape   | _shape_:
      offsets | _offsets_:

  <% template[:numeric].each do |tensor, type| %>
  class <%= tensor %> < Tensor::Base:
    attr_accessor: [fill_value]

    def:
      self.from_sql:
#      self.atan2:

      initialize | Tensor::<%= tensor %>.COPY:
        - { [ *shape, *fill_value_<%= type %> ] }
        - { [ [const V<%= type %> &, values], *shape, *fill_value_<%= type %> ] }
      "== | operator==":
#      "+  | operator+": &binary_op
#        - { Tensor::<%= tensor %> const: [const Tensor::<%= tensor %> & tensor] }
#        - { Tensor::<%= tensor %> const: [<%= type %> value] }
#      "-  | operator-": *binary_op
#      "*  | operator*": *binary_op
#      "/  | operator/": *binary_op
      "[] | operator[]":
        - { const <%= type %> & const: [size_t i] }
        - { const <%= type %> & const: [const Vsize_t & indexes] }
      "[]=": >
        [](Tensor::<%= tensor %> & self, const Vsize_t & indexes, const <%= type %> & value) -> const <%= type %> & {
          self[indexes] = value;
          return value;
        }
      first | front: { const <%= type %> & const: [] }
      last  | back:  { const <%= type %> & const: [] }
      slice: { Tensor::<%= tensor %> const: [*start, *count, *stride] }
      values:
      refill_value: >
        [](Tensor::<%= tensor %> & self, <%= type %> fill_value) -> Tensor::<%= tensor %> & {
          self.refill_value(fill_value);
          return self;
        }
      reshape: >
        [](Tensor::<%= tensor %> & self, const Vsize_t & shape) -> Tensor::<%= tensor %> & {
          self.reshape(shape);
          return self;
        }
      reverse: >
        [](Tensor::<%= tensor %> & self, const Osize_t & axis) -> Tensor::<%= tensor %> & {
          self.reverse(axis);
          return self;
        }
      seq: >
        [](Tensor::<%= tensor %> & self, const O<%= type %> & start) -> Tensor::<%= tensor %> & {
          self.seq(start);
          return self;
        }
      to_sql:
      to_string:
#      abs:
#      exp:
#      log:
#      log10:
#      sqrt:
#      sin:
#      cos:
#      tan:
#      asin:
#      acos:
#      atan:
#      sinh:
#      cosh:
#      tanh:
  <% end %>
